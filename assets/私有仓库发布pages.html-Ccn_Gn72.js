import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,b as e,e as l,o}from"./app-TChdOyIt.js";const t={};function p(i,s){return o(),a("div",null,[s[0]||(s[0]=e('<br><h1 id="背景" tabindex="-1"><a class="header-anchor" href="#背景"><span>背景</span></a></h1><p>由于更换了博客的基础，使用了 <strong>Vuepress</strong> , 整个博客的使用流程就变成了，</p><ol><li>本地编辑项目代码及文章；</li><li>上传项目到 <strong>GitHub</strong> 的仓库；</li><li>通过 <strong>GitHub Actions</strong> 构建并发布到仓库的 <strong>pages</strong> 分支。</li></ol>',4)),l(" more "),s[1]||(s[1]=e(`<p>但是观看了别人项目之后，又有以下顾虑，</p><ul><li>源码公开可见，可以被任意复制粘贴，比如我在修改 <strong><a href="https://theme-hope.vuejs.press/zh/" target="_blank" rel="noopener noreferrer">Vuepress Theme Hope</a></strong> 这个主题的时候，就曾多次到项目的仓库，观看研究；</li><li>修改记录一览无遗，没有隐私性；</li><li>有些文档虽然是公开发布了，但是还有部分隐私不想公开。</li></ul><p>所以说，通过网上的各种教程和自己的研究，就有了以下这次体验和行动。</p><h2 id="开始" tabindex="-1"><a class="header-anchor" href="#开始"><span>开始</span></a></h2><p>先画一个简易的流程，</p><div class="language-mermaid line-numbers-mode" data-highlighter="shiki" data-ext="mermaid" data-title="mermaid" style="background-color:#222222;color:#E6E6E6;"><pre class="shiki slack-dark vp-code"><code><span class="line"><span style="color:#E6E6E6;">graph TB</span></span>
<span class="line"><span style="color:#E6E6E6;">A(本地仓库) --&gt;|Git push| B(私有仓库)</span></span>
<span class="line"><span style="color:#E6E6E6;">B --&gt;|Action build, Deploy| C(公开仓库)</span></span>
<span class="line"><span style="color:#E6E6E6;">C --&gt;|发布Pages| D[Blog]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p><strong>GitHub Actions</strong> 是 <strong>GitHub</strong> 提供的一种自动化工作流服务，用于构建、测试和部署项目。它允许你在代码仓库中配置和运行自动化的工作流程，以响应各种事件，比如代码推送、<strong>Pull</strong> 请求合并等。<br><strong>GitHub Actions</strong> 可以帮助团队自动化软件开发过程中的重复性任务，提高效率并确保代码的质量。<br><strong>GitHub Pages</strong> 是 <strong>GitHub</strong> 提供的一项免费静态网站托管服务。它允许你使用 <strong>GitHub</strong> 仓库来托管和发布个人、项目或组织的静态网页。</p></blockquote><p>综上，通过创建私有仓库，将源码提交到该仓库，再通过 Actions 触发自动化构建流程，并推送部署到公开的 pages 仓库，完成博客的更新发布，且源码位于私有仓库，具有较高的安全性。</p><h2 id="创建仓库和配置工作流文件" tabindex="-1"><a class="header-anchor" href="#创建仓库和配置工作流文件"><span>创建仓库和配置工作流文件</span></a></h2><p>环节中需要创建两个仓库，其中一个私有仓库，我们假设它叫做 <strong>private_repo</strong>，默认分支为 <code>main</code> ；一个公开仓库，假设它叫做 <strong>public_pages</strong>，默认分支为 <code>gh-pages</code>。</p><p>将本地的 Vuepress 博客项目和 private_repo 关联起来：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#222222;color:#E6E6E6;"><pre class="shiki slack-dark vp-code"><code><span class="line"><span style="color:#DCDCAA;">git</span><span style="color:#CE9178;"> remote</span><span style="color:#CE9178;"> add</span><span style="color:#CE9178;"> origin</span><span style="color:#CE9178;"> https://github.com/</span><span style="color:#D4D4D4;">&lt;</span><span style="color:#CE9178;">usernam</span><span style="color:#E6E6E6;">e</span><span style="color:#D4D4D4;">&gt;</span><span style="color:#CE9178;">/private_repo</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>然后修改博客项目根目录下的 <code>YAML</code> 文件，<code>.github/workflows/deploy-docs.yml</code>, 位于 <code>workflows</code> 文件夹内的 <code>YAML</code> 文件都会被尝试解析为工作流。</p><div class="language-yaml line-numbers-mode" data-highlighter="shiki" data-ext="yaml" data-title="yaml" style="background-color:#222222;color:#E6E6E6;"><pre class="shiki slack-dark vp-code"><code><span class="line"><span style="color:#6A9955;"># name 可以自定义</span></span>
<span class="line"><span style="color:#569CD6;">name</span><span style="color:#E6E6E6;">: </span><span style="color:#CE9178;">Deploy GitHub Pages for private</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;"># 触发条件：在 push 到 main/master 分支后. 新的 Github 项目 应该都是 main，而之前的项目一般都是 master</span></span>
<span class="line"><span style="color:#569CD6;">on</span><span style="color:#E6E6E6;">:</span></span>
<span class="line"><span style="color:#569CD6;">  push</span><span style="color:#E6E6E6;">:</span></span>
<span class="line"><span style="color:#569CD6;">    branches</span><span style="color:#E6E6E6;">:</span></span>
<span class="line"><span style="color:#E6E6E6;">      - </span><span style="color:#CE9178;">main</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;"># 任务</span></span>
<span class="line"><span style="color:#569CD6;">jobs</span><span style="color:#E6E6E6;">:</span></span>
<span class="line"><span style="color:#569CD6;">  build-and-deploy</span><span style="color:#E6E6E6;">:</span></span>
<span class="line"><span style="color:#6A9955;">    # 服务器环境：最新版 Ubuntu</span></span>
<span class="line"><span style="color:#569CD6;">    runs-on</span><span style="color:#E6E6E6;">: </span><span style="color:#CE9178;">ubuntu-latest</span></span>
<span class="line"><span style="color:#569CD6;">    permissions</span><span style="color:#E6E6E6;">:</span></span>
<span class="line"><span style="color:#569CD6;">      contents</span><span style="color:#E6E6E6;">: </span><span style="color:#CE9178;">write</span></span>
<span class="line"><span style="color:#569CD6;">      pages</span><span style="color:#E6E6E6;">: </span><span style="color:#CE9178;">write</span></span>
<span class="line"><span style="color:#569CD6;">      id-token</span><span style="color:#E6E6E6;">: </span><span style="color:#CE9178;">write</span></span>
<span class="line"><span style="color:#E6E6E6;">      </span></span>
<span class="line"><span style="color:#569CD6;">    steps</span><span style="color:#E6E6E6;">:</span></span>
<span class="line"><span style="color:#6A9955;">      # 拉取代码</span></span>
<span class="line"><span style="color:#E6E6E6;">      - </span><span style="color:#569CD6;">name</span><span style="color:#E6E6E6;">: </span><span style="color:#CE9178;">Checkout</span></span>
<span class="line"><span style="color:#569CD6;">        uses</span><span style="color:#E6E6E6;">: </span><span style="color:#CE9178;">actions/checkout@v4</span></span>
<span class="line"><span style="color:#569CD6;">        with</span><span style="color:#E6E6E6;">:</span></span>
<span class="line"><span style="color:#569CD6;">          persist-credentials</span><span style="color:#E6E6E6;">: </span><span style="color:#CE9178;">fasle</span><span style="color:#6A9955;"> # false 是用 personal token，true 是使用 GitHub token</span></span>
<span class="line"><span style="color:#569CD6;">          fetch-depth</span><span style="color:#E6E6E6;">: </span><span style="color:#B5CEA8;">1</span></span>
<span class="line"><span style="color:#E6E6E6;">          </span></span>
<span class="line"><span style="color:#6A9955;">      # 生成静态文件</span></span>
<span class="line"><span style="color:#E6E6E6;">      - </span><span style="color:#569CD6;">name</span><span style="color:#E6E6E6;">: </span><span style="color:#CE9178;">Build</span></span>
<span class="line"><span style="color:#569CD6;">        env</span><span style="color:#E6E6E6;">:</span></span>
<span class="line"><span style="color:#569CD6;">          NODE_OPTIONS</span><span style="color:#E6E6E6;">: </span><span style="color:#CE9178;">--max_old_space_size=8192</span></span>
<span class="line"><span style="color:#569CD6;">        run</span><span style="color:#E6E6E6;">: </span><span style="color:#CE9178;">npm install --legacy-peer-deps &amp;&amp; npm run docs:build</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;">      # 利用公开的 action 将生成的文件 push 到指定仓库</span></span>
<span class="line"><span style="color:#E6E6E6;">      - </span><span style="color:#569CD6;">name</span><span style="color:#E6E6E6;">: </span><span style="color:#CE9178;">Deploy</span></span>
<span class="line"><span style="color:#569CD6;">        uses</span><span style="color:#E6E6E6;">: </span><span style="color:#CE9178;">JamesIves/github-pages-deploy-action@v4</span></span>
<span class="line"><span style="color:#569CD6;">        with</span><span style="color:#E6E6E6;">:</span></span>
<span class="line"><span style="color:#569CD6;">          repository-name</span><span style="color:#E6E6E6;">: </span><span style="color:#CE9178;">&lt;username&gt;/public_pages</span><span style="color:#6A9955;">	# 指定 push 的仓库</span></span>
<span class="line"><span style="color:#569CD6;">          branch</span><span style="color:#E6E6E6;">: </span><span style="color:#CE9178;">gh-pages</span><span style="color:#6A9955;">	# 指定 push 的分支</span></span>
<span class="line"><span style="color:#569CD6;">          folder</span><span style="color:#E6E6E6;">: </span><span style="color:#CE9178;">src/.vuepress/dist</span><span style="color:#6A9955;">	# push 的目录</span></span>
<span class="line"><span style="color:#569CD6;">          token</span><span style="color:#E6E6E6;">: </span><span style="color:#CE9178;">\${{ secrets.ACCESS_TOKEN }}</span><span style="color:#6A9955;">	# Personal Access Token</span></span>
<span class="line"><span style="color:#569CD6;">          single-commit</span><span style="color:#E6E6E6;">: </span><span style="color:#569CD6;">true</span><span style="color:#6A9955;">	# 是否只保留最新的提交记录</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里有几个注意的点，</p><p>第一是部署分支，一般情况下都是 <code>main</code> ，但是也要确认以下，是否有误差；</p><p>二是，在 <code>YAML</code> 中，最后的 <code>folder </code> 和 <code>token</code> 参数变量。<br><br><code>folder</code> 是项目构建成功后，需要 <code>push</code> 的目录，注意自己在修改项目的时候是否变更过文件的名称。<br><br><code>token</code> 更重要，下面具体讲。</p><h3 id="公开仓库账户内创建-token" tabindex="-1"><a class="header-anchor" href="#公开仓库账户内创建-token"><span>公开仓库账户内创建 <code>TOKEN</code></span></a></h3><p>网上很多教程在创建 <code>token</code> 的时候描述的很模糊，都是说需要到 <strong>public_pages</strong> 的 <code>settings</code> 去创建，对于刚接触或者不懂得人，会一头雾水，但实际上，创建路径都是一样的。即在 <strong>public_pages</strong> 这个公开仓库的账户的 <strong>Settings</strong> , 如下图所示，登录 Github 后，点击右上角头像，选择 <strong>Settings</strong> 。<br></p><div align="center"><img src="https://img-cdn.icecome.com/image/私有仓库发布pages/20240908_145555.png" alt="20240908_145555.png"></div><br><blockquote><p>实际上，由于这里我们创建两个仓库的账户是同一个，所以 <code>token</code> 创建位置是一样的。假设，两个仓库的账户不相同，那么就需要到公开仓库的账户创建 <code>token</code>，在私有仓库的账户使用。</p></blockquote><p>接下来继续讲 <code>token</code> 创建，</p><p>在 Settings -&gt; Developer settings -&gt; Personal access tokens -&gt; Tokens (classic), 创建一个 <code>token</code>，<br><br></p><div align="center"><img src="https://img-cdn.icecome.com/image/私有仓库发布pages/20240908_150324.png" alt="20240908_150324.png"></div><br> - **Fine-grained tokens**：细粒度的访问令牌，可以指定适用的仓库，有效期最多一年 - **Tokens**：经典访问令牌，无法指定具体仓库，粒度较粗，有效期可以无限 <p>这里有两种选择，较新的 <strong>Fine tokens</strong> 和经典 <strong>Token</strong>，看个人喜好选择。为了安全性，选择第一种，为了便捷性，选择第二种。</p><p>给予这个 <code>token</code> 对于公共仓库 <strong>public_pages</strong> 的读写权限即可，生成后记得复制留存 <code>token</code>，为了安全，关闭页面后这个 <code>token</code> 就看不到值了。</p><h3 id="私有仓库设置内添加-token" tabindex="-1"><a class="header-anchor" href="#私有仓库设置内添加-token"><span>私有仓库设置内添加 <code>TOKEN</code></span></a></h3><p>然后我们到 <strong>private_repo</strong> 的 Settings -&gt; Secrets and variables -&gt; Actions 页面，创建一个 <em>Secret</em>，此处名称任意，但是就像我们开头说的那样，为了辨识，可以使用和前面创建时相同的名称，<em>value</em> 值就填刚刚生成的 <em>PAT</em> 即可。<br><br><img src="https://img-cdn.icecome.com/image/私有仓库发布pages/20240908_151136.png" alt="20240908_151136.png" loading="lazy"><br></p><p>这一步的原因在于，<strong>Github Actions</strong> 是在一个容器里运行的，因此要推送代码到某个仓库前必须通过验证对这个仓库有读写权限。上一步创建的 <em>PAT</em> 正好就授予了 <strong>public_pages</strong> 的读写权限，因此 <strong>private_repo</strong> 这个仓库在执行 <strong>Github Actions</strong> 时，可以通过 <code>\${{ secrets.&lt;secret_name&gt; }}</code> 这样的形式来引用这个 <em>PAT</em>，进而通过权限系统的校验。这里变量 <code>\${{ secrets.&lt;secret_name&gt; }}</code> 中， <code>secrets.</code> 是固定值，而 <code>&lt;secret_name&gt;</code> 就是在 <em>Actions</em> 添加的 <em>Secrets</em> 值的名字。上图中，为了辨识，我将添加的 <em>Secrets</em> 值的名字，设置为了和创建时的名称一致。</p><h3 id="开启-github-pages" tabindex="-1"><a class="header-anchor" href="#开启-github-pages"><span>开启 <em>Github Pages</em></span></a></h3><p>最后，把本地的 <strong>VuePress</strong> 项目推送到 <strong>private_repo</strong>，就会自动触发构建流程推送到 <strong>public_pages</strong> 了，然后在 <strong>public_repo</strong> 中开启 <strong>Github Pages</strong>，从默认分支的根目录执行部署, 稍等一会即可打开部署的 <strong>Blog</strong> 。<br><br><img src="https://img-cdn.icecome.com/image/私有仓库发布pages/20240908_153255.png" alt="20240908_153255.png" loading="lazy"><br></p><p>如果有域名的话，还可以在 <em>Custom domain</em> 中设置自定义域名，记得要在服务商那里添加解析，比如 <strong>Cloud flare</strong> 。</p><h2 id="end" tabindex="-1"><a class="header-anchor" href="#end"><span>End.</span></a></h2>`,36))])}const d=n(t,[["render",p],["__file","私有仓库发布pages.html.vue"]]),g=JSON.parse('{"path":"/learn/code/Git/%E7%A7%81%E6%9C%89%E4%BB%93%E5%BA%93%E5%8F%91%E5%B8%83pages.html","title":"使用 Github 私有仓库存储源码并通过 GitHub Actions 发布网站到公开仓库","lang":"zh-CN","frontmatter":{"title":"使用 Github 私有仓库存储源码并通过 GitHub Actions 发布网站到公开仓库","date":"2024-09-08T15:00:00.000Z","author":"都将焉予","cover":null,"icon":"ri:git-commit-line","order":-1,"category":["学习"],"tags":["动手实践","Git"],"toc":true,"article":true,"star":false,"sticky":false,"editLink":false,"pageview":false,"lastUpdated":false,"description":"背景 由于更换了博客的基础，使用了 Vuepress , 整个博客的使用流程就变成了， 本地编辑项目代码及文章； 上传项目到 GitHub 的仓库； 通过 GitHub Actions 构建并发布到仓库的 pages 分支。","head":[["meta",{"property":"og:url","content":"https://blog.icecome.com/learn/code/Git/%E7%A7%81%E6%9C%89%E4%BB%93%E5%BA%93%E5%8F%91%E5%B8%83pages.html"}],["meta",{"property":"og:site_name","content":"三无亦拾吾"}],["meta",{"property":"og:title","content":"使用 Github 私有仓库存储源码并通过 GitHub Actions 发布网站到公开仓库"}],["meta",{"property":"og:description","content":"背景 由于更换了博客的基础，使用了 Vuepress , 整个博客的使用流程就变成了， 本地编辑项目代码及文章； 上传项目到 GitHub 的仓库； 通过 GitHub Actions 构建并发布到仓库的 pages 分支。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://img-cdn.icecome.com/image/%E7%A7%81%E6%9C%89%E4%BB%93%E5%BA%93%E5%8F%91%E5%B8%83pages/20240908_151136.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-10-09T07:43:26.000Z"}],["meta",{"property":"article:author","content":"都将焉予"}],["meta",{"property":"article:tag","content":"动手实践"}],["meta",{"property":"article:tag","content":"Git"}],["meta",{"property":"article:published_time","content":"2024-09-08T15:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-10-09T07:43:26.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"使用 Github 私有仓库存储源码并通过 GitHub Actions 发布网站到公开仓库\\",\\"image\\":[\\"https://img-cdn.icecome.com/image/%E7%A7%81%E6%9C%89%E4%BB%93%E5%BA%93%E5%8F%91%E5%B8%83pages/20240908_151136.png\\",\\"https://img-cdn.icecome.com/image/%E7%A7%81%E6%9C%89%E4%BB%93%E5%BA%93%E5%8F%91%E5%B8%83pages/20240908_153255.png\\"],\\"datePublished\\":\\"2024-09-08T15:00:00.000Z\\",\\"dateModified\\":\\"2024-10-09T07:43:26.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"都将焉予\\"}]}"]]},"headers":[{"level":2,"title":"开始","slug":"开始","link":"#开始","children":[]},{"level":2,"title":"创建仓库和配置工作流文件","slug":"创建仓库和配置工作流文件","link":"#创建仓库和配置工作流文件","children":[{"level":3,"title":"公开仓库账户内创建 TOKEN","slug":"公开仓库账户内创建-token","link":"#公开仓库账户内创建-token","children":[]},{"level":3,"title":"私有仓库设置内添加 TOKEN","slug":"私有仓库设置内添加-token","link":"#私有仓库设置内添加-token","children":[]},{"level":3,"title":"开启 Github Pages","slug":"开启-github-pages","link":"#开启-github-pages","children":[]}]},{"level":2,"title":"End.","slug":"end","link":"#end","children":[]}],"git":{"createdTime":1728459806000,"updatedTime":1728459806000,"contributors":[{"name":"icecome","email":"werrice@outlook.com","commits":1}]},"readingTime":{"minutes":5.86,"words":1757},"filePathRelative":"learn/code/Git/私有仓库发布pages.md","localizedDate":"2024年9月8日","excerpt":"<br>\\n<h1>背景</h1>\\n<p>由于更换了博客的基础，使用了 <strong>Vuepress</strong> , 整个博客的使用流程就变成了，</p>\\n<ol>\\n<li>本地编辑项目代码及文章；</li>\\n<li>上传项目到 <strong>GitHub</strong> 的仓库；</li>\\n<li>通过 <strong>GitHub Actions</strong> 构建并发布到仓库的 <strong>pages</strong> 分支。</li>\\n</ol>\\n","autoDesc":true}');export{d as comp,g as data};
